{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5379f461",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as  pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "import tensorflow as tf \n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Flatten, Dropout\n",
    "from keras.layers.convolutional import Conv2D, MaxPooling2D\n",
    "from keras.utils import to_categorical\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89a81f14",
   "metadata": {},
   "source": [
    "## Uploading data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "92a7b1c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train = pd.read_csv(\"csvTrainImages 60k x 784.csv\")\n",
    "y_train = pd.read_csv(\"csvTrainLabel 60k x 1.csv\")\n",
    "x_test = pd.read_csv(\"csvTestImages 10k x 784.csv\")\n",
    "y_test = pd.read_csv(\"csvTestLabel 10k x 1.csv\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2484626d",
   "metadata": {},
   "source": [
    "## Data Cleaning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e88a88c3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of missing values: 0        0\n",
      "0.1      0\n",
      "0.2      0\n",
      "0.3      0\n",
      "0.4      0\n",
      "        ..\n",
      "0.491    0\n",
      "0.492    0\n",
      "0.493    0\n",
      "0.494    0\n",
      "0.495    0\n",
      "Length: 784, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check for missing values\n",
    "print(\"Number of missing values:\", np.isnan(x_train).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "61cb93b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of missing values: 0        0\n",
      "0.1      0\n",
      "0.2      0\n",
      "0.3      0\n",
      "0.4      0\n",
      "        ..\n",
      "0.491    0\n",
      "0.492    0\n",
      "0.493    0\n",
      "0.494    0\n",
      "0.495    0\n",
      "Length: 784, dtype: int64\n",
      "Number of missing values: 0    0\n",
      "dtype: int64\n",
      "Number of missing values: 0        0\n",
      "0.1      0\n",
      "0.2      0\n",
      "0.3      0\n",
      "0.4      0\n",
      "        ..\n",
      "0.543    0\n",
      "0.544    0\n",
      "0.545    0\n",
      "0.546    0\n",
      "0.547    0\n",
      "Length: 784, dtype: int64\n",
      "Number of missing values: 0    0\n",
      "dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#check for missing values\n",
    "print(\"Number of missing values:\", np.isnan(x_train).sum())\n",
    "print(\"Number of missing values:\", np.isnan(y_train).sum())\n",
    "print(\"Number of missing values:\", np.isnan(x_test).sum())\n",
    "print(\"Number of missing values:\", np.isnan(y_test).sum())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "6fd67c2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# concatenate to facilitate drop duplicates\n",
    "x = np.array(np.concatenate((x_train, x_test)), dtype='float64')\n",
    "y = np.array(np.concatenate((y_train, y_test)), dtype='int64')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "09d152c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Flatten images into 1D array\n",
    "x_flat = x.reshape(x.shape[0], -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "94762cd4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Find unique rows in flattened array\n",
    "unique_rows, indices = np.unique(x_flat, axis=0, return_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fd869ff5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Duplicates found.\n"
     ]
    }
   ],
   "source": [
    "# Check for duplicates\n",
    "if len(unique_rows) == x_flat.shape[0]:\n",
    "    print(\"No duplicates found.\")\n",
    "else:\n",
    "    print(\"Duplicates found.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a7892771",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop duplicates\n",
    "x_unique = x[indices]\n",
    "y_unique = y[indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d2932393",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X shape: (69998, 784)\n",
      "y shape: (69998, 1)\n"
     ]
    }
   ],
   "source": [
    "# Print the new shapes of the data\n",
    "print(\"X shape:\", x.shape)\n",
    "print(\"y shape:\", y.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a79d1fe2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Reshape the figures\n",
    "x= x.reshape(-1, 28, 28, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "42df48c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Normalize the data\n",
    "x/= 255.0\n",
    "y= to_categorical(y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f254267",
   "metadata": {},
   "source": [
    "## Preparing data for our model "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ca784cb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# split the dataset into 70% for training and 30% for testing\n",
    "X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "59f0a91b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: 48998\n",
      "Testing set size: 21000\n"
     ]
    }
   ],
   "source": [
    "# print the sizes of the training and testing sets\n",
    "print(\"Training set size:\", len(X_train))\n",
    "print(\"Testing set size:\", len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ca929da3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We need to normalize the pictures to make it easy for the NN to make the calculation\n",
    "X_train = tf.keras.utils.normalize(X_train, axis = 1)\n",
    "X_test = tf.keras.utils.normalize(X_test, axis = 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10053d93",
   "metadata": {},
   "source": [
    "# 1. Applying ANN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "b76ced22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1532/1532 [==============================] - 8s 4ms/step - loss: 0.1933 - accuracy: 0.9506 - val_loss: 0.1036 - val_accuracy: 0.9695\n",
      "Epoch 2/10\n",
      "1532/1532 [==============================] - 6s 4ms/step - loss: 0.0811 - accuracy: 0.9761 - val_loss: 0.0766 - val_accuracy: 0.9771\n",
      "Epoch 3/10\n",
      "1532/1532 [==============================] - 7s 4ms/step - loss: 0.0571 - accuracy: 0.9833 - val_loss: 0.0658 - val_accuracy: 0.9799\n",
      "Epoch 4/10\n",
      "1532/1532 [==============================] - 6s 4ms/step - loss: 0.0419 - accuracy: 0.9881 - val_loss: 0.0595 - val_accuracy: 0.9821\n",
      "Epoch 5/10\n",
      "1532/1532 [==============================] - 6s 4ms/step - loss: 0.0320 - accuracy: 0.9903 - val_loss: 0.0543 - val_accuracy: 0.9845\n",
      "Epoch 6/10\n",
      "1532/1532 [==============================] - 7s 5ms/step - loss: 0.0247 - accuracy: 0.9927 - val_loss: 0.0521 - val_accuracy: 0.9853\n",
      "Epoch 7/10\n",
      "1532/1532 [==============================] - 6s 4ms/step - loss: 0.0190 - accuracy: 0.9944 - val_loss: 0.0485 - val_accuracy: 0.9863\n",
      "Epoch 8/10\n",
      "1532/1532 [==============================] - 7s 4ms/step - loss: 0.0145 - accuracy: 0.9959 - val_loss: 0.0521 - val_accuracy: 0.9858\n",
      "Epoch 9/10\n",
      "1532/1532 [==============================] - 8s 5ms/step - loss: 0.0121 - accuracy: 0.9967 - val_loss: 0.0510 - val_accuracy: 0.9864\n",
      "Epoch 10/10\n",
      "1532/1532 [==============================] - 7s 5ms/step - loss: 0.0103 - accuracy: 0.9970 - val_loss: 0.0487 - val_accuracy: 0.9873\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1ccb5f32c40>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the architecture of the ANN\n",
    "model = Sequential()\n",
    "model.add(Flatten(input_shape=(28, 28))) # Flatten the input image\n",
    "model.add(Dense(128, activation='relu')) # Add a fully connected hidden layer with 128 neurons and ReLU activation\n",
    "model.add(Dense(10, activation='softmax')) # Add a fully connected output layer with 10 neurons and softmax activation\n",
    "\n",
    "# Compile the model\n",
    "model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n",
    "\n",
    "# Train the model on the MNIST dataset\n",
    "model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "b9c75e05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "657/657 [==============================] - 1s 2ms/step - loss: 0.0487 - accuracy: 0.9873\n",
      "0.987333357334137\n"
     ]
    }
   ],
   "source": [
    "loss, accuracy = model.evaluate(X_test, y_test)\n",
    "print(accuracy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "fa5cffe8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "WARNING:absl:Found untraced functions such as _update_step_xla while saving (showing 1 of 1). These functions will not be directly callable after loading.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: handwritten.model\\assets\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Assets written to: handwritten.model\\assets\n"
     ]
    }
   ],
   "source": [
    "model.save(\"handwritten.model\");"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "7e3bf98c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model that we saved \n",
    "model = tf.keras.models.load_model('handwritten.model')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3132eac9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "657/657 [==============================] - 1s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "predictions = model.predict([X_test])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "07017b98",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(X_test[5485], cmap='gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "bb5d0784",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    }
   ],
   "source": [
    "print(np.argmax(predictions[5485]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "144f6530",
   "metadata": {},
   "source": [
    "# 2. Applying CNN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "dc9dcad4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the architecture of the CNN\n",
    "model = Sequential()\n",
    "model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D((2, 2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(64, activation='relu'))\n",
    "model.add(Dense(10, activation='softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "0d5a0157",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Compile the model\n",
    "model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "1f82870d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1532/1532 [==============================] - 30s 19ms/step - loss: 0.1186 - accuracy: 0.9647 - val_loss: 0.0416 - val_accuracy: 0.9878\n",
      "Epoch 2/10\n",
      "1532/1532 [==============================] - 29s 19ms/step - loss: 0.0349 - accuracy: 0.9892 - val_loss: 0.0268 - val_accuracy: 0.9916\n",
      "Epoch 3/10\n",
      "1532/1532 [==============================] - 30s 19ms/step - loss: 0.0259 - accuracy: 0.9920 - val_loss: 0.0277 - val_accuracy: 0.9924\n",
      "Epoch 4/10\n",
      "1532/1532 [==============================] - 31s 20ms/step - loss: 0.0219 - accuracy: 0.9933 - val_loss: 0.0256 - val_accuracy: 0.9923\n",
      "Epoch 5/10\n",
      "1532/1532 [==============================] - 28s 19ms/step - loss: 0.0188 - accuracy: 0.9943 - val_loss: 0.0296 - val_accuracy: 0.9921\n",
      "Epoch 6/10\n",
      "1532/1532 [==============================] - 28s 19ms/step - loss: 0.0151 - accuracy: 0.9951 - val_loss: 0.0367 - val_accuracy: 0.9896\n",
      "Epoch 7/10\n",
      "1532/1532 [==============================] - 29s 19ms/step - loss: 0.0147 - accuracy: 0.9955 - val_loss: 0.0247 - val_accuracy: 0.9939\n",
      "Epoch 8/10\n",
      "1532/1532 [==============================] - 30s 20ms/step - loss: 0.0118 - accuracy: 0.9961 - val_loss: 0.0258 - val_accuracy: 0.9934\n",
      "Epoch 9/10\n",
      "1532/1532 [==============================] - 31s 20ms/step - loss: 0.0104 - accuracy: 0.9966 - val_loss: 0.0275 - val_accuracy: 0.9931\n",
      "Epoch 10/10\n",
      "1532/1532 [==============================] - 30s 20ms/step - loss: 0.0102 - accuracy: 0.9970 - val_loss: 0.0212 - val_accuracy: 0.9943\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.callbacks.History at 0x1ccb633bf70>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Train the model\n",
    "model.fit(X_train, y_train, epochs=10, batch_size=32, validation_data=(X_test, y_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "26628c02",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "657/657 [==============================] - 4s 6ms/step - loss: 0.0212 - accuracy: 0.9943\n",
      "Test accuracy: 0.9943333268165588\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the testing dataset\n",
    "test_loss, test_acc = model.evaluate(X_test, y_test)\n",
    "print('Test accuracy:', test_acc)\n",
    "\n",
    "# Save the model\n",
    "model.save('arabic_digits_cnn_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "8ff4a9e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load the model that we saved \n",
    "model = tf.keras.models.load_model('arabic_digits_cnn_model.h5')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "09095c6d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "657/657 [==============================] - 4s 6ms/step\n"
     ]
    }
   ],
   "source": [
    "# Evaluate the model on the test data\n",
    "pred = model.predict([X_test])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "a60ba100",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot a figure from x test\n",
    "plt.imshow(X_test[188], cmap='gray')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "808cad3e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    }
   ],
   "source": [
    "print(np.argmax(pred[188]))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f02cf509",
   "metadata": {},
   "source": [
    "# Calculate accuracy, precision, recall and f- score for ANN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "5ed59008",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "657/657 [==============================] - 2s 2ms/step\n"
     ]
    }
   ],
   "source": [
    "# Load the ANN model and make predictions on the testing dataset\n",
    "ann_model = tf.keras.models.load_model('handwritten.model')\n",
    "ann_pred = ann_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "78a5bbb3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the predictions to classes\n",
    "ann_pred_classes = np.argmax(ann_pred, axis=1)\n",
    "y_test_classes = np.argmax(y_test, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "0580620f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the evaluation metrics for the ANN\n",
    "ann_accuracy = accuracy_score(y_test_classes, ann_pred_classes)\n",
    "ann_precision = precision_score(y_test_classes, ann_pred_classes, average='weighted')\n",
    "ann_recall = recall_score(y_test_classes, ann_pred_classes, average='weighted')\n",
    "ann_f1 = f1_score(y_test_classes, ann_pred_classes, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6b8fc5e8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ANN Accuracy: 0.9873333333333333\n",
      "ANN Precision: 0.9873481578450443\n",
      "ANN Recall: 0.9873333333333333\n",
      "ANN F1-Score: 0.9873334570535443\n"
     ]
    }
   ],
   "source": [
    "print(\"ANN Accuracy:\", ann_accuracy)\n",
    "print(\"ANN Precision:\", ann_precision)\n",
    "print(\"ANN Recall:\", ann_recall)\n",
    "print(\"ANN F1-Score:\", ann_f1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7b17928a",
   "metadata": {},
   "source": [
    "# Calculate accuracy, precision, recall and f- score for CNN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "dcfdb1c6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "657/657 [==============================] - 4s 6ms/step\n"
     ]
    }
   ],
   "source": [
    "# Load the CNN model and make predictions on the testing dataset\n",
    "cnn_model = tf.keras.models.load_model('arabic_digits_cnn_model.h5')\n",
    "cnn_pred = cnn_model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "5b72a225",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the predictions to classes\n",
    "cnn_pred_classes = np.argmax(cnn_pred, axis=1)\n",
    "y_test_classes = np.argmax(y_test, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "73f09f4a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the evaluation metrics for the CNN\n",
    "cnn_accuracy = accuracy_score(y_test_classes, cnn_pred_classes)\n",
    "cnn_precision = precision_score(y_test_classes, cnn_pred_classes, average='weighted')\n",
    "cnn_recall = recall_score(y_test_classes, cnn_pred_classes, average='weighted')\n",
    "cnn_f1 = f1_score(y_test_classes, cnn_pred_classes, average='weighted')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "87f87b22",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CNN Accuracy: 0.9943333333333333\n",
      "CNN Precision: 0.9943401033963067\n",
      "CNN Recall: 0.9943333333333333\n",
      "CNN F1-Score: 0.9943285134872311\n"
     ]
    }
   ],
   "source": [
    "# Print the evaluation metrics for the CNN algorithm\n",
    "print(\"CNN Accuracy:\", cnn_accuracy)\n",
    "print(\"CNN Precision:\", cnn_precision)\n",
    "print(\"CNN Recall:\", cnn_recall)\n",
    "print(\"CNN F1-Score:\", cnn_f1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3a2617d",
   "metadata": {},
   "source": [
    "# Compare the result between ANN and CNN "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "78db63a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The CNN algorithm has the best accuracy.\n",
      "The CNN algorithm has thebest precision.\n",
      "The CNN algorithm has the best recall.\n",
      "The CNN algorithm has the best F1-Score.\n"
     ]
    }
   ],
   "source": [
    "if ann_accuracy > cnn_accuracy:\n",
    "    print(\"The ANN algorithm has the best accuracy.\")\n",
    "else:\n",
    "    print(\"The CNN algorithm has the best accuracy.\")\n",
    "\n",
    "if ann_precision > cnn_precision:\n",
    "    print(\"The ANN algorithm has the best precision.\")\n",
    "else:\n",
    "    print(\"The CNN algorithm has thebest precision.\")\n",
    "\n",
    "if ann_recall > cnn_recall:\n",
    "    print(\"The ANN algorithm has the best recall.\")\n",
    "else:\n",
    "    print(\"The CNN algorithm has the best recall.\")\n",
    "\n",
    "if ann_f1 > cnn_f1:\n",
    "    print(\"The ANN algorithm has the best F1-Score.\")\n",
    "else:\n",
    "    print(\"The CNN algorithm has the best F1-Score.\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
